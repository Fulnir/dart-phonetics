{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterator","id":"Iterator","comment":"\nAn interface for getting items, one at a time, from an object.\n\nThe for-in construct transparently uses Iterator to test for the end\nof the iteration, and to get each item (or _element_).\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe Iterator is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If no element is left, then [moveNext]\nreturns false.\n\nA typical usage of an Iterator looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n\n**See also:** [Iteration]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-iteration)\nin the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html)\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"41"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"kind":"property","name":"current","id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"50"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterator.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"211"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"211"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"225"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"238"}],"line":"237"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"244"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"244"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"276"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"279"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"299"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"303"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"307"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"307"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"339"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"339"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"347"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"347"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"377"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of (some of) the elements of `this`.\n\nElements are represented by their own `toString` results.\n\nThe representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.\n\nIf the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.\n\nThe conversion may omit calling `toString` on some elements if they\nare known to now occur in the output, and it may stop iterating after\na hundred elements.\n","line":"403"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"291"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"293"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"311"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"319"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"331"},{"kind":"constructor","name":"","id":"0()","line":"205"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"202"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"}],"kind":"library","name":"package:intl/intl.dart","id":"intl","comment":"\nThis library provides internationalization and localization. This includes\nmessage formatting and replacement, date and number formatting and parsing,\nand utilities for working with Bidirectional text.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      intl: any\n\nThen run `pub install`.\n\nFor more information, see the\n[intl package on pub.dartlang.org](http://pub.dartlang.org/packages/intl).\n\nFor things that require locale or other data, there are multiple different\nways of making that data available, which may require importing different\nlibraries. See the class comments for more details.\n\nThere is also a simple example application that can be found in the\n`example/basic` directory.\n\n[pub]: http://pub.dartlang.org\n","children":[{"returnType":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"method","name":"_iterator","id":"_iterator1()","comment":"\nReturn an iterator on the string as a list of substrings.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"isPrivate":true,"uri":"package:intl/number_format.dart","line":"695"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"_iterable","id":"_iterable1()","comment":"\nReturns an [Iterable] on the string as a list of substrings.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"isPrivate":true,"uri":"package:intl/number_format.dart","line":"690"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"String","refId":"dart.core/String"}]}],"kind":"class","name":"_StringIterator","id":"_StringIterator","comment":"\nProvides an iterator over a string as a list of substrings, and also\ngives us a lookahead of one via the [peek] method.\n","children":[{"kind":"method","name":"inBounds","id":"inBounds1()","children":[{"kind":"param","name":"i","id":"i"}],"line":"716"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"720"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"current","id":"current","line":"718"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"peek","id":"peek","line":"721"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"iterator","id":"iterator","line":"722"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"input","id":"input","line":"714"},{"kind":"variable","name":"index","id":"index","line":"715"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"input","refId":"intl/_StringIterator/input"},"kind":"param","name":"input","id":"input"}],"line":"717"}],"isPrivate":true,"uri":"package:intl/number_format.dart","line":"713"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"class","name":"_StringIterable","id":"_StringIterable","comment":"\nProvides an Iterable that wraps [_iterator] so it can be used in a `for`\nloop.\n","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"iterator","id":"iterator","line":"703"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"705"}],"isPrivate":true,"uri":"package:intl/number_format.dart","line":"702"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_NumberFormatParser","id":"_NumberFormatParser","comment":"\nPrivate class that parses the numeric formatting pattern and sets the\nvariables in [format] to appropriate values. Instances of this are\ntransient and store parsing state in instance variables, so can only be used\nto parse a single pattern.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parse","id":"parse0()","comment":"Parse the input pattern and set the values. ","line":"432"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_parseAffix","id":"_parseAffix0()","comment":"\nParse a prefix or suffix and return the prefix/suffix string. Note that\nthis also may modify the state of [format].\n","isPrivate":true,"line":"466"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"parseCharacterAffix","id":"parseCharacterAffix1()","comment":"\nParse an individual character as part of a prefix or suffix.  Return true\nif we should continue to look for more affix characters, and false if\nwe have reached the end.\n","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"affix","id":"affix"}],"line":"481"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_parseTrunk","id":"_parseTrunk0()","comment":"\nParse the \"trunk\" portion of the pattern, the piece that doesn't include\npositive or negative prefixes or suffixes.\n","isPrivate":true,"line":"542"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"parseTrunkCharacter","id":"parseTrunkCharacter0()","comment":"\nParse an individual character of the trunk. Return true if we should\ncontinue to look for additional trunk characters or false if we have\nreached the end.\n","line":"613"},{"ref":{"name":"NumberSymbols","refId":"number_symbols/NumberSymbols"},"kind":"property","name":"symbols","id":"symbols","comment":"The [NumberSymbols] for the locale in which our [format] prints. ","line":"429"},{"isStatic":true,"kind":"variable","name":"_PATTERN_SEPARATOR","id":"_PATTERN_SEPARATOR","comment":"\nThe special characters in the pattern language. All others are treated\nas literals.\n","isPrivate":true,"line":"402"},{"isStatic":true,"kind":"variable","name":"_QUOTE","id":"_QUOTE","isPrivate":true,"line":"403"},{"isStatic":true,"kind":"variable","name":"_PATTERN_DIGIT","id":"_PATTERN_DIGIT","isPrivate":true,"line":"404"},{"isStatic":true,"kind":"variable","name":"_PATTERN_ZERO_DIGIT","id":"_PATTERN_ZERO_DIGIT","isPrivate":true,"line":"405"},{"isStatic":true,"kind":"variable","name":"_PATTERN_GROUPING_SEPARATOR","id":"_PATTERN_GROUPING_SEPARATOR","isPrivate":true,"line":"406"},{"isStatic":true,"kind":"variable","name":"_PATTERN_DECIMAL_SEPARATOR","id":"_PATTERN_DECIMAL_SEPARATOR","isPrivate":true,"line":"407"},{"isStatic":true,"kind":"variable","name":"_PATTERN_CURRENCY_SIGN","id":"_PATTERN_CURRENCY_SIGN","isPrivate":true,"line":"408"},{"isStatic":true,"kind":"variable","name":"_PATTERN_PER_MILLE","id":"_PATTERN_PER_MILLE","isPrivate":true,"line":"409"},{"isStatic":true,"kind":"variable","name":"_PATTERN_PERCENT","id":"_PATTERN_PERCENT","isPrivate":true,"line":"410"},{"isStatic":true,"kind":"variable","name":"_PATTERN_EXPONENT","id":"_PATTERN_EXPONENT","isPrivate":true,"line":"411"},{"isStatic":true,"kind":"variable","name":"_PATTERN_PLUS","id":"_PATTERN_PLUS","isPrivate":true,"line":"412"},{"ref":{"name":"NumberFormat","refId":"intl/NumberFormat"},"isFinal":true,"kind":"variable","name":"format","id":"format","comment":"The format whose state we are setting. ","line":"415"},{"ref":{"name":"_StringIterator","refId":"intl/_StringIterator"},"isFinal":true,"kind":"variable","name":"pattern","id":"pattern","comment":"The pattern we are parsing. ","line":"418"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"inQuote","id":"inQuote","comment":"Variable used in parsing prefixes and suffixes to keep track of\nwhether or not we are in a quoted region. ","line":"460"},{"kind":"variable","name":"decimalPos","id":"decimalPos","comment":"Variables used in [_parseTrunk] and [parseTrunkCharacter]. ","line":"531"},{"kind":"variable","name":"digitLeftCount","id":"digitLeftCount","line":"532"},{"kind":"variable","name":"zeroDigitCount","id":"zeroDigitCount","line":"533"},{"kind":"variable","name":"digitRightCount","id":"digitRightCount","line":"534"},{"kind":"variable","name":"groupingCount","id":"groupingCount","line":"535"},{"kind":"variable","name":"trunk","id":"trunk","line":"536"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreate a new [_NumberFormatParser] for a particular [NumberFormat] and\n[input] pattern.\n","children":[{"ref":{"name":"NumberFormat","refId":"intl/NumberFormat"},"initializedField":{"name":"format","refId":"intl/_NumberFormatParser/format"},"kind":"param","name":"format","id":"format"},{"kind":"param","name":"input","id":"input"}],"line":"424"}],"isPrivate":true,"uri":"package:intl/number_format.dart","line":"396"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"NumberFormat","id":"NumberFormat","comment":"\nProvides the ability to format a number in a locale-specific way. The\nformat is specified as a pattern using a subset of the ICU formatting\npatterns.\n\n- `0` A single digit\n- `#` A single digit, omitted if the value is zero\n- `.` Decimal separator\n- `-` Minus sign\n- `,` Grouping separator\n- `E` Separates mantissa and expontent\n- `+` - Before an exponent, indicates it should be prefixed with a plus sign.\n- `%` - In prefix or suffix, multiply by 100 and show as percentage\n- `‰ (\\u2030)` In prefix or suffix, multiply by 1000 and show as per mille\n- `¤ (\\u00A4)` Currency sign, replaced by currency name\n- `'` Used to quote special characters\n- `;` Used to separate the positive and negative patterns if both are present\n\nFor example,\n      var f = new NumberFormat(\"###.0#\", \"en_US\");\n      print(f.format(12.345));\n      ==> 12.34\nIf the locale is not specified, it will default to the current locale. If\nthe format is not specified it will print in a basic format with at least\none integer digit and three fraction digits.\n\nThere are also standard patterns available via the special constructors. e.g.\n      var symbols = new NumberFormat.percentFormat(\"ar\");\nThere are four such constructors: decimalFormat, percentFormat,\nscientificFormat and currencyFormat. However, at the moment,\nscientificFormat prints only as equivalent to \"#E0\" and does not take\ninto account significant digits. currencyFormat will always use the name\nof the currency rather than the symbol.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"localeExists","id":"localeExists1()","comment":"\nReturn true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.\n","children":[{"kind":"param","name":"localeName","id":"localeName"}],"line":"130"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format1()","comment":"\nFormat [number] according to our pattern and return the formatted string.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"number","id":"number"}],"line":"146"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_formatNumber","id":"_formatNumber1()","comment":"\nFormat the main part of the number in the form dictated by the pattern.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"number","id":"number"}],"isPrivate":true,"line":"165"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_formatExponential","id":"_formatExponential1()","comment":"Format the number in exponential notation. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"number","id":"number"}],"isPrivate":true,"line":"174"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_formatExponent","id":"_formatExponent1()","comment":"\nFormat the exponent portion, e.g. in \"1.3e-5\" the \"e-5\".\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"exponent","id":"exponent"}],"isPrivate":true,"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_formatFixed","id":"_formatFixed1()","comment":"\nFormat the basic number portion, inluding the fractional digits.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"number","id":"number"}],"isPrivate":true,"line":"231"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_formatFractionPart","id":"_formatFractionPart1()","comment":"\nFormat the part after the decimal place in a fixed point number.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"fractionPart","id":"fractionPart"}],"isPrivate":true,"line":"286"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_decimalSeparator","id":"_decimalSeparator1()","comment":"Print the decimal separator if appropriate. ","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"fractionPresent","id":"fractionPresent"}],"isPrivate":true,"line":"299"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_hasPrintableIntegerPart","id":"_hasPrintableIntegerPart1()","comment":"\nReturn true if we have a main integer part which is printable, either\nbecause we have digits left of the decimal point, or because there are\na minimum number of printable digits greater than 1.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"intValue","id":"intValue"}],"isPrivate":true,"line":"310"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_newBuffer","id":"_newBuffer0()","comment":"\nCreate a new empty buffer. See comment on [_buffer] variable for why\nwe have it as an instance variable rather than passing it on the stack.\n","isPrivate":true,"line":"318"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_add","id":"_add1()","comment":"A group of methods that provide support for writing digits and other\nrequired characters into [_buffer] easily.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"323"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addCharCode","id":"_addCharCode1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"324"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addZero","id":"_addZero0()","isPrivate":true,"line":"325"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addDigit","id":"_addDigit1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"326"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_pad","id":"_pad2()","comment":"Print padding up to [numberOfDigits] above what's included in [basic]. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"numberOfDigits","id":"numberOfDigits"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"kind":"param","name":"basic","id":"basic"}],"isPrivate":true,"line":"329"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_group","id":"_group2()","comment":"\nWe are printing the digits of the number from left to right. We may need\nto print a thousands separator or other grouping character as appropriate\nto the locale. So we find how many places we are from the end of the number\nby subtracting our current [position] from the [totalLength] and print\nthe separator character every [_groupingSize] digits.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"totalLength","id":"totalLength"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"position","id":"position"}],"isPrivate":true,"line":"345"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_signPrefix","id":"_signPrefix1()","comment":"\nReturns the prefix for [x] based on whether it's positive or negative.\nIn en_US this would be '' and '-' respectively.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"367"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_signSuffix","id":"_signSuffix1()","comment":"\nReturns the suffix for [x] based on wether it's positive or negative.\nIn en_US there are no suffixes for positive or negative.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"375"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_setPattern","id":"_setPattern1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"newPattern","id":"newPattern"}],"isPrivate":true,"line":"379"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"387"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"locale","id":"locale","comment":"\nReturn the locale code in which we operate, e.g. 'en_US' or 'pt'.\n","line":"124"},{"ref":{"name":"NumberSymbols","refId":"number_symbols/NumberSymbols"},"kind":"property","name":"symbols","id":"symbols","comment":"\nReturn the symbols which are used in our locale. Cache them to avoid\nrepeated lookup.\n","line":"139"},{"kind":"property","name":"_localeZero","id":"_localeZero","comment":"Returns the code point for the locale's zero digit. ","isPrivate":true,"line":"361"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_negativePrefix","id":"_negativePrefix","comment":"Variables to determine how number printing behaves. ","isPrivate":true,"line":"44"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_positivePrefix","id":"_positivePrefix","isPrivate":true,"line":"45"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_negativeSuffix","id":"_negativeSuffix","isPrivate":true,"line":"46"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_positiveSuffix","id":"_positiveSuffix","isPrivate":true,"line":"47"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_groupingSize","id":"_groupingSize","comment":"\nHow many numbers in a group when using punctuation to group digits in\nlarge numbers. e.g. in en_US: \"1,000,000\" has a grouping size of 3 digits\nbetween commas.\n","isPrivate":true,"line":"53"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_decimalSeparatorAlwaysShown","id":"_decimalSeparatorAlwaysShown","isPrivate":true,"line":"54"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_useSignForPositiveExponent","id":"_useSignForPositiveExponent","isPrivate":true,"line":"55"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_useExponentialNotation","id":"_useExponentialNotation","isPrivate":true,"line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"maximumIntegerDigits","id":"maximumIntegerDigits","line":"58"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minimumIntegerDigits","id":"minimumIntegerDigits","line":"59"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"maximumFractionDigits","id":"maximumFractionDigits","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minimumFractionDigits","id":"minimumFractionDigits","line":"61"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minimumExponentDigits","id":"minimumExponentDigits","line":"62"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_multiplier","id":"_multiplier","isPrivate":true,"line":"64"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_pattern","id":"_pattern","comment":"\nStores the pattern used to create this format. This isn't used, but\nis helpful in debugging.\n","isPrivate":true,"line":"70"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_locale","id":"_locale","comment":"The locale in which we print numbers. ","isPrivate":true,"line":"73"},{"ref":{"name":"NumberSymbols","refId":"number_symbols/NumberSymbols"},"kind":"variable","name":"_symbols","id":"_symbols","comment":"Caches the symbols used for our locale. ","isPrivate":true,"line":"76"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"variable","name":"_buffer","id":"_buffer","comment":"\nTransient internal state in which to build up the result of the format\noperation. We can have this be just an instance variable because Dart is\nsingle-threaded and unless we do an asynchronous operation in the process\nof formatting then there will only ever be one number being formatted\nat a time. In languages with threads we'd need to pass this on the stack.\n","isPrivate":true,"line":"85"},{"isFinal":true,"kind":"variable","name":"_maxInt","id":"_maxInt","comment":"Used to test if we have exceeded Javascript integer limits. ","isPrivate":true,"line":"226"},{"isFinal":true,"kind":"variable","name":"_zero","id":"_zero","comment":"Returns the code point for the character '0'. ","isPrivate":true,"line":"354"},{"returnType":{"name":"NumberFormat","refId":"intl/NumberFormat"},"kind":"constructor","name":"","id":"2()","comment":"\nCreate a number format that prints using [newPattern] as it applies in\n[locale].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"newPattern","id":"newPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"91"},{"kind":"constructor","name":"decimalPattern","id":"decimalPattern1()","comment":"Create a number format that prints as DECIMAL_PATTERN. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"96"},{"kind":"constructor","name":"percentPattern","id":"percentPattern1()","comment":"Create a number format that prints as PERCENT_PATTERN. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"100"},{"kind":"constructor","name":"scientificPattern","id":"scientificPattern1()","comment":"Create a number format that prints as SCIENTIFIC_PATTERN. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"104"},{"kind":"constructor","name":"currencyPattern","id":"currencyPattern1()","comment":"Create a number format that prints as CURRENCY_PATTERN. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"108"},{"kind":"constructor","name":"_forPattern","id":"_forPattern2()","comment":"\nCreate a number format that prints in a pattern we get from\nthe [getPattern] function using the locale [locale].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"locale","id":"locale"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"getPattern","id":"getPattern"}],"isPrivate":true,"line":"115"}],"uri":"package:intl/number_format.dart","line":"40"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Bidi","id":"Bidi","comment":"\nThis provides utility methods for working with bidirectional text. All\nof the methods are static, and are organized into a class primarily to\ngroup them together for documentation and discoverability.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"stripHtmlIfNeeded","id":"stripHtmlIfNeeded1()","comment":"\nReturns the input [text] with spaces instead of HTML tags or HTML escapes,\nwhich is helpful for text directionality estimation.\nNote: This function should not be used in other contexts.\nIt does not deal well with many things: comments, script,\nelements, style elements, dir attribute,`>` in quoted attribute values,\netc. But it does handle well enough the most common use cases.\nSince the worst that can happen as a result of these shortcomings is that\nthe wrong directionality will be estimated, we have not invested in\nimproving this.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"99"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"startsWithLtr","id":"startsWithLtr2()","comment":"\nDetermines if the first character in [text] with strong directionality is\nLTR. If [isHtml] is true, the text is HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"110"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"startsWithRtl","id":"startsWithRtl2()","comment":"\nDetermines if the first character in [text] with strong directionality is\nRTL. If [isHtml] is true, the text is HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"119"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"endsWithLtr","id":"endsWithLtr2()","comment":"\nDetermines if the exit directionality (ie, the last strongly-directional\ncharacter in [text] is LTR. If [isHtml] is true, the text is HTML or\nHTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"129"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"endsWithRtl","id":"endsWithRtl2()","comment":"\nDetermines if the exit directionality (ie, the last strongly-directional\ncharacter in [text] is RTL. If [isHtml] is true, the text is HTML or\nHTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"139"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"hasAnyLtr","id":"hasAnyLtr2()","comment":"\nDetermines if the given [text] has any LTR characters in it.\nIf [isHtml] is true, the text is HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"148"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"hasAnyRtl","id":"hasAnyRtl2()","comment":"\nDetermines if the given [text] has any RTL characters in it.\nIf [isHtml] is true, the text is HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"157"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isRtlLanguage","id":"isRtlLanguage1()","comment":"\nCheck if a BCP 47 / III [languageString] indicates an RTL language.\n\ni.e. either:\n- a language code explicitly specifying one of the right-to-left scripts,\n  e.g. \"az-Arab\", or\n- a language code specifying one of the languages normally written in a\n  right-to-left script, e.g. \"fa\" (Farsi), except ones explicitly\n  specifying Latin or Cyrillic script (which are the usual LTR\n  alternatives).\n\nThe list of right-to-left scripts appears in the 100-199 range in\nhttp://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and\nHebrew are by far the most widely used. We also recognize Thaana, N'Ko, and\nTifinagh, which also have significant modern usage. The rest (Syriac,\nSamaritan, Mandaic, etc.) seem to have extremely limited or no modern usage\nand are not recognized.\nThe languages usually written in a right-to-left script are taken as those\nwith Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in\nhttp://www.iana.org/assignments/language-subtag-registry,\nas well as Sindhi (sd) and Uyghur (ug).\nThe presence of other subtags of the language code, e.g. regions like EG\n(Egypt), is ignored.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"languageString","id":"languageString"}],"line":"186"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"enforceRtlInHtml","id":"enforceRtlInHtml1()","comment":"\nEnforce the [html] snippet in RTL directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (should work on Chrome, FF, and IE\nsince this was ported directly from the Closure version).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"html","id":"html"}],"line":"201"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"enforceRtlInText","id":"enforceRtlInText1()","comment":"\nEnforce RTL on both end of the given [text] using unicode BiDi formatting\ncharacters RLE and PDF.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"209"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"enforceLtrInHtml","id":"enforceLtrInHtml1()","comment":"\nEnforce the [html] snippet in LTR directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (tested on FF and IE).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"html","id":"html"}],"line":"221"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"enforceLtrInText","id":"enforceLtrInText1()","comment":"\nEnforce LTR on both end of the given [text] using unicode BiDi formatting\ncharacters LRE and PDF.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"229"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_enforceInHtmlHelper","id":"_enforceInHtmlHelper2()","comment":"\nEnforce the [html] snippet in the desired [direction] regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (tested on FF and IE).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"html","id":"html"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"direction","id":"direction"}],"isPrivate":true,"line":"241"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"guardBracketInHtml","id":"guardBracketInHtml2()","comment":"\nApply bracket guard to [str] using html span tag. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nIf [isRtlContext] is true, then we explicitly want to wrap in a span of RTL\ndirectionality, regardless of the estimated directionality.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"kind":"param","name":"isRtlContext","id":"isRtlContext"}],"line":"263"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"guardBracketInText","id":"guardBracketInText2()","comment":"\nApply bracket guard to [str] using LRM and RLM. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nThis version works for both plain text and html, but in some cases is not\nas good as guardBracketInHtml.\nIf [isRtlContext] is true, then we explicitly want to wrap in a span of RTL\ndirectionality, regardless of the estimated directionality.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"kind":"param","name":"isRtlContext","id":"isRtlContext"}],"line":"279"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_guardBracketHelper","id":"_guardBracketHelper4()","comment":"\n(Mostly) reimplements the $& functionality of \"replace\" in JavaScript.\nGiven a [str] and the [regexp] to match with, optionally supply a string to\nbe inserted [before] the match and/or [after]. For example,\n`_guardBracketHelper('firetruck', new RegExp('truck'), 'hydrant', '!')`\nwould return 'firehydrant!'.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"param","name":"regexp","id":"regexp"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"before","id":"before"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"after","id":"after","line":"296"}],"isPrivate":true,"line":"295"},{"returnType":{"name":"TextDirection","refId":"intl/TextDirection"},"isStatic":true,"kind":"method","name":"estimateDirectionOfText","id":"estimateDirectionOfText2()","comment":"\nEstimates the directionality of [text] using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n[isHtml] is true if [text] HTML or HTML-escaped.\n\nIf the number of RTL words is above a certain percentage of the total\nnumber of strongly directional words, returns RTL.\nOtherwise, if any words are strongly or weakly LTR, returns LTR.\nOtherwise, returns UNKNOWN, which is used to mean `neutral`.\nNumbers and URLs are counted as weakly LTR.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isHtml","id":"isHtml","line":"323"}],"line":"322"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"normalizeHebrewQuote","id":"normalizeHebrewQuote1()","comment":"\nReplace the double and single quote directly after a Hebrew character in\n[str] with GERESH and GERSHAYIM. This is most likely the user's intention.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"359"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"detectRtlDirectionality","id":"detectRtlDirectionality2()","comment":"\nCheck the estimated directionality of [str], return true if the piece of\ntext should be laid out in RTL direction. If [isHtml] is true, the string\nis HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"385"},{"isStatic":true,"kind":"variable","name":"LRE","id":"LRE","comment":"Unicode \"Left-To-Right Embedding\" (LRE) character. ","line":"61"},{"isStatic":true,"kind":"variable","name":"RLE","id":"RLE","comment":"Unicode \"Right-To-Left Embedding\" (RLE) character. ","line":"64"},{"isStatic":true,"kind":"variable","name":"PDF","id":"PDF","comment":"Unicode \"Pop Directional Formatting\" (PDF) character. ","line":"67"},{"isStatic":true,"kind":"variable","name":"LRM","id":"LRM","comment":"Unicode \"Left-To-Right Mark\" (LRM) character. ","line":"70"},{"isStatic":true,"kind":"variable","name":"RLM","id":"RLM","comment":"Unicode \"Right-To-Left Mark\" (RLM) character. ","line":"73"},{"ref":{"name":"num","refId":"dart.core/num"},"isStatic":true,"kind":"variable","name":"_RTL_DETECTION_THRESHOLD","id":"_RTL_DETECTION_THRESHOLD","comment":"Constant to define the threshold of RTL directionality. ","isPrivate":true,"line":"76"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"_LTR_CHARS","id":"_LTR_CHARS","comment":"\nPractical patterns to identify strong LTR and RTL characters, respectively.\nThese patterns are not completely correct according to the Unicode\nstandard. They are simplified for performance and small code size.\n","isPrivate":true,"line":"83"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"_RTL_CHARS","id":"_RTL_CHARS","isPrivate":true,"line":"86"}],"uri":"package:intl/bidi_utils.dart","line":"58"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TextDirection","id":"TextDirection","comment":"\nBidi stands for Bi-directional text.\nAccording to http://en.wikipedia.org/wiki/Bi-directional_text:\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to boustrophedon,\nwhich is changing text directionality in each row.\n\nThis file provides some utility classes for determining directionality of\ntext, switching CSS layout from LTR to RTL, and other normalizing utilities\nneeded when switching between RTL and LTR formatting.\n\nIt defines the TextDirection class which is used to represent directionality\nof text,\nIn most cases, it is preferable to use bidi_formatter.dart, which provides\nbidi functionality in the given directional context, instead of using\nbidi_utils.dart directly.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isDirectionChange","id":"isDirectionChange1()","comment":"\nReturns true if [otherDirection] is known to be different from this\ndirection.\n","children":[{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"kind":"param","name":"otherDirection","id":"otherDirection"}],"line":"48"},{"isStatic":true,"kind":"variable","name":"LTR","id":"LTR","line":"26"},{"isStatic":true,"kind":"variable","name":"RTL","id":"RTL","line":"27"},{"isStatic":true,"kind":"variable","name":"UNKNOWN","id":"UNKNOWN","line":"31"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"value","id":"value","comment":"\nTextual representation of the directionality constant. One of\n'LTR', 'RTL', or 'UNKNOWN'.\n","line":"37"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"spanText","id":"spanText","comment":"Textual representation of the directionality when used in span tag. ","line":"40"},{"kind":"constructor","name":"_","id":"_2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"value","refId":"intl/TextDirection/value"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"spanText","refId":"intl/TextDirection/spanText"},"kind":"param","name":"spanText","id":"spanText"}],"isPrivate":true,"line":"42"}],"uri":"package:intl/bidi_utils.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"BidiFormatter","id":"BidiFormatter","comment":"\nBidi stands for Bi-directional text.\nAccording to [Wikipedia](http://en.wikipedia.org/wiki/Bi-directional_text):\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to boustrophedon,\nwhich is changing text directionality in each row.\n\nUtility class for formatting display text in a potentially\nopposite-directionality context without garbling layout issues.\nMostly a very \"slimmed-down\" and dart-ified port of the Closure Birectional\nformatting libary. If there is a utility in the Closure library (or ICU, or\nelsewhere) that you would like this formatter to make available, please\ncontact the Dart team.\n\nProvides the following functionality:\n\n1. *BiDi Wrapping*\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a \"wrapper\" that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts where mark-up\ncan not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.\n\n2. *Directionality estimation*\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.\n\n3. *Escaping*\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS\nattacks and other nasty business. This of course is always true, but the\nescaping cannot be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.\n\nThus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"wrapWithSpan","id":"wrapWithSpan4()","comment":"\nFormats a string of a given (or estimated, if not provided)\n[direction] for use in HTML output of the context directionality, so\nan opposite-directionality string is neither garbled nor garbles what\nfollows it.\nIf the input string's directionality doesn't match the context\ndirectionality, we wrap it with a `span` tag and add a `dir` attribute\n(either \"dir=rtl\" or \"dir=ltr\").\nIf alwaysSpan was true when constructing the formatter, the input is always\nwrapped with `span` tag, skipping the dir attribute when it's not needed.\n\nIf [resetDir] is true and the overall directionality or the exit\ndirectionality of [text] is opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM). If [isHtml] is false, we HTML-escape the [text].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"resetDir","id":"resetDir"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"isOptional":true,"isNamed":true,"kind":"param","name":"direction","id":"direction","line":"101"}],"line":"100"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"wrapWithUnicode","id":"wrapWithUnicode4()","comment":"\nFormat [text] of a known (if specified) or estimated [direction] for use\nin *plain-text* output of the context directionality, so an\nopposite-directionality text is neither garbled nor garbles what follows\nit. Unlike wrapWithSpan, this makes use of unicode BiDi formatting\ncharacters instead of spans for wrapping. The returned string would be\nRLE+text+PDF for RTL text, or LRE+text+PDF for LTR text.\n\nIf [resetDir] is true, and if the overall directionality or the exit\ndirectionality of text are opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM).\n\nIn HTML, the *only* valid use of this function is inside of elements that\ndo not allow markup, e.g. an 'option' tag.\nThis function does *not* do HTML-escaping regardless of the value of\n[isHtml]. [isHtml] is used to designate if the text contains HTML (escaped\nor unescaped).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isHtml","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"resetDir","id":"resetDir"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"isOptional":true,"isNamed":true,"kind":"param","name":"direction","id":"direction","line":"138"}],"line":"137"},{"returnType":{"name":"TextDirection","refId":"intl/TextDirection"},"kind":"method","name":"estimateDirection","id":"estimateDirection2()","comment":"\nEstimates the directionality of [text] using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n[isHtml] is true if [text] HTML or HTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isHtml","id":"isHtml"}],"line":"155"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_resetDir","id":"_resetDir3()","comment":"\nReturns a unicode BiDi mark matching the surrounding context's [direction]\n(not necessarily the direction of [text]). The function returns an LRM or\nRLM if the overall directionality or the exit directionality of [text] is\nopposite the context directionality. Otherwise\nreturn the empty string. [isHtml] is true if [text] is HTML or\nHTML-escaped.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"kind":"param","name":"direction","id":"direction"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isHtml","id":"isHtml"}],"isPrivate":true,"line":"167"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isRTL","id":"isRTL","comment":"Is true if the known context direction for this formatter is RTL. ","line":"82"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"kind":"variable","name":"contextDirection","id":"contextDirection","comment":"The direction of the surrounding text (the context). ","line":"61"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_alwaysSpan","id":"_alwaysSpan","comment":"\nIndicates if we should always wrap the formatted text in a &lt;span&lt;,.\n","isPrivate":true,"line":"66"},{"kind":"constructor","name":"LTR","id":"LTR1()","comment":"\nCreate a formatting object with a direction. If [alwaysSpan] is true we\nshould always use a `span` tag, even when the input directionality is\nneutral or matches the context, so that the DOM structure of the output\ndoes not depend on the combination of directionalities.\n","children":[{"defaultValue":"false","isOptional":true,"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"74"},{"kind":"constructor","name":"RTL","id":"RTL1()","children":[{"defaultValue":"false","isOptional":true,"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"76"},{"kind":"constructor","name":"UNKNOWN","id":"UNKNOWN1()","children":[{"defaultValue":"false","isOptional":true,"kind":"param","name":"alwaysSpan","id":"alwaysSpan"}],"line":"78"}],"uri":"package:intl/bidi_formatter.dart","line":"58"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Stream","id":"_Stream","comment":"\nA simple and not particularly general stream class to make parsing\ndates from strings simpler. It is general enough to operate on either\nlists or strings.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"atEnd","id":"atEnd0()","line":"75"},{"kind":"method","name":"next","id":"next0()","line":"77"},{"kind":"method","name":"read","id":"read1()","comment":"\nReturn the next [howMany] items, or as many as there are remaining.\nAdvance the stream by that many positions.\n","children":[{"defaultValue":"1","isOptional":true,"kind":"param","name":"howMany","id":"howMany"}],"line":"83"},{"kind":"method","name":"peek","id":"peek1()","comment":"\nReturn the next [howMany] items, or as many as there are remaining.\nDoes not modify the stream position.\n","children":[{"defaultValue":"1","isOptional":true,"kind":"param","name":"howMany","id":"howMany"}],"line":"93"},{"kind":"method","name":"rest","id":"rest0()","comment":"Return the remaining contents of the stream ","line":"107"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"findIndex","id":"findIndex1()","comment":"\nFind the index of the first element for which [f] returns true.\nAdvances the stream to that position.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f"}],"line":"113"},{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"findIndexes","id":"findIndexes1()","comment":"\nFind the indexes of all the elements for which [f] returns true.\nLeaves the stream positioned at the end.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f"}],"line":"124"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"nextInteger","id":"nextInteger0()","line":"137"},{"kind":"variable","name":"contents","id":"contents","line":"70"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"index","id":"index","line":"71"},{"kind":"variable","name":"digitMatcher","id":"digitMatcher","comment":"\nAssuming that the contents are characters, read as many digits as we\ncan see and then return the corresponding integer. Advance the stream.\n","line":"136"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"contents","refId":"intl/_Stream/contents"},"kind":"param","name":"contents","id":"contents"}],"line":"73"}],"isPrivate":true,"uri":"package:intl/src/date_format_helpers.dart","line":"69"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_DateBuilder","id":"_DateBuilder","comment":"\nA class for holding onto the data for a date so that it can be built\nup incrementally.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setYear","id":"setYear1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"27"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setMonth","id":"setMonth1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"28"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setDay","id":"setDay1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"29"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setHour","id":"setHour1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"30"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setMinute","id":"setMinute1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"31"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setSecond","id":"setSecond1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setFractionalSecond","id":"setFractionalSecond1()","children":[{"kind":"param","name":"x","id":"x"}],"line":"33"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"asDate","id":"asDate0()","comment":"\nReturn a date built using our values. If no date portion is set,\nuse the \"Epoch\" of January 1, 1970.\n","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"year","id":"year","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"month","id":"month","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"day","id":"day","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"hour","id":"hour","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"minute","id":"minute","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"second","id":"second","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"fractionalSecond","id":"fractionalSecond","line":"15"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"pm","id":"pm","line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"utc","id":"utc","line":"23"}],"isPrivate":true,"uri":"package:intl/src/date_format_helpers.dart","line":"12"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"kind":"class","name":"_DateFormatPatternField","id":"_DateFormatPatternField","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format1()","comment":"Format date according to our specification and return the result. ","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"111"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parse","id":"parse2()","comment":"\nParse the date according to our specification and put the result\ninto the correct place in dateFields.\n","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"dateFields","id":"dateFields"}],"line":"119"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseField","id":"parseField2()","comment":"\nParse a field representing part of a date pattern. Note that we do not\nreturn a value, but rather build up the result in [builder].\n","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"builder","id":"builder"}],"line":"127"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatField","id":"formatField1()","comment":"Formatting logic if we are of type FIELD ","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"157"},{"kind":"method","name":"formatEra","id":"formatEra1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"186"},{"kind":"method","name":"formatYear","id":"formatYear1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"192"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"handleNumericField","id":"handleNumericField3()","comment":"\nWe are given [input] as a stream from which we want to read a date. We\ncan't dynamically build up a date, so we are given a list [dateFields] of\nthe constructor arguments and an [position] at which to set it\n(year,month,day,hour,minute,second,fractionalSecond)\nthen after all parsing is done we construct a date from the arguments.\nThis method handles reading any of the numeric fields. The [offset]\nargument allows us to compensate for zero-based versus one-based values.\n","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"setter","id":"setter"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"offset","id":"offset"}],"line":"210"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"parseEnumeratedString","id":"parseEnumeratedString2()","comment":"\nWe are given [input] as a stream from which we want to read a date. We\ncan't dynamically build up a date, so we are given a list [dateFields] of\nthe constructor arguments and an [position] at which to set it\n(year,month,day,hour,minute,second,fractionalSecond)\nthen after all parsing is done we construct a date from the arguments.\nThis method handles reading any of string fields from an enumerated set.\n","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"possibilities","id":"possibilities"}],"line":"224"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMonth","id":"formatMonth1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseMonth","id":"parseMonth2()","children":[{"kind":"param","name":"input","id":"input"},{"kind":"param","name":"dateFields","id":"dateFields"}],"line":"245"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format24Hours","id":"format24Hours1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"256"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatFractionalSeconds","id":"formatFractionalSeconds1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"260"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatAmPm","id":"formatAmPm1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"271"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseAmPm","id":"parseAmPm2()","children":[{"kind":"param","name":"input","id":"input"},{"kind":"param","name":"dateFields","id":"dateFields"}],"line":"278"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format1To12Hours","id":"format1To12Hours1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"284"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parse1To12Hours","id":"parse1To12Hours2()","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"dateFields","id":"dateFields"}],"line":"291"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format0To11Hours","id":"format0To11Hours1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"296"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format0To23Hours","id":"format0To23Hours1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"300"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatStandaloneDay","id":"formatStandaloneDay1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"304"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseStandaloneDay","id":"parseStandaloneDay1()","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"}],"line":"314"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatStandaloneMonth","id":"formatStandaloneMonth1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"326"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseStandaloneMonth","id":"parseStandaloneMonth2()","children":[{"kind":"param","name":"input","id":"input"},{"kind":"param","name":"dateFields","id":"dateFields"}],"line":"339"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatQuarter","id":"formatQuarter1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"350"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDayOfMonth","id":"formatDayOfMonth1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"358"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDayOfYear","id":"formatDayOfYear1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"362"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"dayNumberInYear","id":"dayNumberInYear1()","comment":"Return the ordinal day, i.e. the day number in the year. ","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"365"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"ordinalDayFromMarchFirst","id":"ordinalDayFromMarchFirst1()","comment":"\nReturn the day of the year counting March 1st as 1, after which the\nnumber of days per month is constant, so it's easier to calculate.\nFormula from http://en.wikipedia.org/wiki/Ordinal_date\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"376"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isLeapYear","id":"isLeapYear1()","comment":"\nReturn true if this is a leap year. Rely on [DateTime] to do the\nunderlying calculation, even though it doesn't expose the test to us.\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"383"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDayOfWeek","id":"formatDayOfWeek1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"388"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseDayOfWeek","id":"parseDayOfWeek1()","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"}],"line":"394"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatMinutes","id":"formatMinutes1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"400"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatSeconds","id":"formatSeconds1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"404"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatTimeZoneId","id":"formatTimeZoneId1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"408"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatTimeZone","id":"formatTimeZone1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"413"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatTimeZoneRFC","id":"formatTimeZoneRFC1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"417"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"padTo","id":"padTo2()","comment":"\nReturn a string representation of the object padded to the left with\nzeros. Primarily useful for numbers.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"toBePrinted","id":"toBePrinted"}],"line":"425"},{"ref":{"name":"DateSymbols","refId":"date_symbols/DateSymbols"},"kind":"property","name":"symbols","id":"symbols","comment":"Return the symbols for our current locale. ","line":"184"},{"kind":"constructor","name":"","id":"2()","children":[{"kind":"param","name":"pattern","id":"pattern"},{"kind":"param","name":"parent","id":"parent"}],"line":"108"}],"isPrivate":true,"uri":"package:intl/src/date_format_field.dart","line":"106"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"kind":"class","name":"_DateFormatQuotedField","id":"_DateFormatQuotedField","comment":"\nRepresents a literal field with quoted characters in it. This is\nonly slightly more complex than a _DateFormatLiteralField.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"fullPattern","id":"fullPattern0()","line":"79"},{"kind":"method","name":"parse","id":"parse2()","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"dateFields","id":"dateFields"}],"line":"86"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"patchQuotes","id":"patchQuotes0()","line":"90"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_fullPattern","id":"_fullPattern","isPrivate":true,"line":"77"},{"kind":"constructor","name":"","id":"2()","children":[{"kind":"param","name":"pattern","id":"pattern"},{"kind":"param","name":"parent","id":"parent"}],"line":"81"}],"isPrivate":true,"uri":"package:intl/src/date_format_field.dart","line":"75"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"kind":"class","name":"_DateFormatLiteralField","id":"_DateFormatLiteralField","comment":"\nRepresents a literal field - a sequence of characters that doesn't\nchange according to the date's data. As such, the implementation\nis extremely simple.\n","children":[{"kind":"method","name":"parse","id":"parse2()","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"dateFields","id":"dateFields"}],"line":"66"},{"kind":"constructor","name":"","id":"2()","children":[{"kind":"param","name":"pattern","id":"pattern"},{"kind":"param","name":"parent","id":"parent"}],"line":"64"}],"isPrivate":true,"uri":"package:intl/src/date_format_field.dart","line":"62"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"_DateFormatField","id":"_DateFormatField","comment":"\nThis is a private class internal to DateFormat which is used for formatting\nparticular fields in a template. e.g. if the format is hh:mm:ss then the\nfields would be \"hh\", \":\", \"mm\", \":\", and \"ss\". Each type of field knows\nhow to format that portion of a date.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"fullPattern","id":"fullPattern0()","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"30"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format1()","comment":"Format date according to our specification and return the result. ","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"33"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parse","id":"parse2()","comment":"Abstract method for subclasses to implementing parsing for their format.","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"kind":"param","name":"dateFields","id":"dateFields"}],"line":"40"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"parseLiteral","id":"parseLiteral1()","comment":"Parse a literal field. We just look for the exact input. ","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"input","id":"input"}],"line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"throwFormatException","id":"throwFormatException1()","comment":"Throw a format exception with an error message indicating the position.","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"kind":"param","name":"stream","id":"stream"}],"line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"width","id":"width","comment":"\nReturn the width of [pattern]. Different widths represent different\nformatting options. See the comment for DateFormat for details.\n","line":"26"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"pattern","id":"pattern","comment":"The format string that defines us, e.g. \"hh\" ","line":"15"},{"ref":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"variable","name":"parent","id":"parent","comment":"The DateFormat that we are part of.","line":"18"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"pattern","refId":"intl/_DateFormatField/pattern"},"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"DateFormat","refId":"intl/DateFormat"},"initializedField":{"name":"parent","refId":"intl/_DateFormatField/parent"},"kind":"param","name":"parent","id":"parent"}],"line":"20"}],"isPrivate":true,"uri":"package:intl/src/date_format_field.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DateFormat","id":"DateFormat","comment":"\nDateFormat is for formatting and parsing dates in a locale-sensitive\nmanner.\nIt allows the user to choose from a set of standard date time formats as well\nas specify a customized pattern under certain locales. Date elements that\nvary across locales include month name, week name, field order, etc.\nWe also allow the user to use any customized pattern to parse or format\ndate-time strings under certain locales. Date elements that vary across\nlocales include month name, weekname, field, order, etc.\n\nFormatting dates in the default \"en_US\" format does not require any\ninitialization. e.g.\n      print(new DateFormat.yMMMd().format(new Date.now()));\n\nBut for other locales, the formatting data for the locale must be\nobtained. This can currently be done\nin one of three ways, determined by which library you import. In all cases,\nthe \"initializeDateFormatting\" method must be called and will return a future\nthat is complete once the locale data is available. The result of the future\nisn't important, but the data for that locale is available to the date\nformatting and parsing once it completes.\n\nThe easiest option is that the data may be available locally, imported in a\nlibrary that contains data for all the locales.\n      import 'package:intl/date_symbol_data_local.dart';\n      initializeDateFormatting(\"fr_FR\", null).then((_) => runMyCode());\n\nIf we are running outside of a browser, we may want to read the data\nfrom files in the file system.\n      import 'package:intl/date_symbol_data_file.dart';\n      initializeDateFormatting(\"de_DE\", null).then((_) => runMyCode());\n\nIf we are running in a browser, we may want to read the data from the\nserver using the XmlHttpRequest mechanism.\n      import 'package:intl/date_symbol_data_http_request.dart';\n      initializeDateFormatting(\"pt_BR\", null).then((_) => runMyCode());\n\nThe code in example/basic/basic_example.dart shows a full example of\nusing this mechanism.\n\nOnce we have the locale data, we need to specify the particular format.\nThis library uses the ICU/JDK date/time pattern specification both for\ncomplete format specifications and also the abbreviated \"skeleton\" form\nwhich can also adapt to different locales and is preferred where available.\n\nSkeletons: These can be specified either as the ICU constant name or as the\nskeleton to which it resolves. The supported set of skeletons is as follows\n     ICU Name                   Skeleton\n     --------                   --------\n     DAY                          d\n     ABBR_WEEKDAY                 E\n     WEEKDAY                      EEEE\n     ABBR_STANDALONE_MONTH        LLL\n     STANDALONE_MONTH             LLLL\n     NUM_MONTH                    M\n     NUM_MONTH_DAY                Md\n     NUM_MONTH_WEEKDAY_DAY        MEd\n     ABBR_MONTH                   MMM\n     ABBR_MONTH_DAY               MMMd\n     ABBR_MONTH_WEEKDAY_DAY       MMMEd\n     MONTH                        MMMM\n     MONTH_DAY                    MMMMd\n     MONTH_WEEKDAY_DAY            MMMMEEEEd\n     ABBR_QUARTER                 QQQ\n     QUARTER                      QQQQ\n     YEAR                         y\n     YEAR_NUM_MONTH               yM\n     YEAR_NUM_MONTH_DAY           yMd\n     YEAR_NUM_MONTH_WEEKDAY_DAY   yMEd\n     YEAR_ABBR_MONTH              yMMM\n     YEAR_ABBR_MONTH_DAY          yMMMd\n     YEAR_ABBR_MONTH_WEEKDAY_DAY  yMMMEd\n     YEAR_MONTH                   yMMMM\n     YEAR_MONTH_DAY               yMMMMd\n     YEAR_MONTH_WEEKDAY_DAY       yMMMMEEEEd\n     YEAR_ABBR_QUARTER            yQQQ\n     YEAR_QUARTER                 yQQQQ\n     HOUR24                       H\n     HOUR24_MINUTE                Hm\n     HOUR24_MINUTE_SECOND         Hms\n     HOUR                         j\n     HOUR_MINUTE                  jm\n     HOUR_MINUTE_SECOND           jms\n     HOUR_MINUTE_GENERIC_TZ       jmv\n     HOUR_MINUTE_TZ               jmz\n     HOUR_GENERIC_TZ              jv\n     HOUR_TZ                      jz\n     MINUTE                       m\n     MINUTE_SECOND                ms\n     SECOND                       s\n\nExamples Using the US Locale:\n\n     Pattern                           Result\n     ----------------                  -------\n     new DateFormat.yMd()             -> 7/10/1996\n     new DateFormat(\"yMd\")            -> 7/10/1996\n     new DateFormat.yMMMMd(\"en_US\")   -> July 10, 1996\n     new DateFormat(\"Hm\", \"en_US\")    -> 12:08 PM\n     new DateFormat.yMd().add_Hm()    -> 7/10/1996 12:08 PM\n\nExplicit Pattern Syntax: Formats can also be specified with a pattern string.\nThe skeleton forms will resolve to explicit patterns of this form, but will\nalso adapt to different patterns in different locales.\nThe following characters are reserved:\n\n    Symbol   Meaning                Presentation        Example\n    ------   -------                ------------        -------\n    G        era designator         (Text)              AD\n    y        year                   (Number)            1996\n    M        month in year          (Text & Number)     July & 07\n    L        standalone month       (Text & Number)     July & 07\n    d        day in month           (Number)            10\n    c        standalone day         (Number)            10\n    h        hour in am/pm (1~12)   (Number)            12\n    H        hour in day (0~23)     (Number)            0\n    m        minute in hour         (Number)            30\n    s        second in minute       (Number)            55\n    S        fractional second      (Number)            978\n    E        day of week            (Text)              Tuesday\n    D        day in year            (Number)            189\n    a        am/pm marker           (Text)              PM\n    k        hour in day (1~24)     (Number)            24\n    K        hour in am/pm (0~11)   (Number)            0\n    z        time zone              (Text)              Pacific Standard Time\n    Z        time zone (RFC 822)    (Number)            -0800\n    v        time zone (generic)    (Text)              Pacific Time\n    Q        quarter                (Text)              Q3\n    '        escape for text        (Delimiter)         'Date='\n    ''       single quote           (Literal)           'o''clock'\n\nThe count of pattern letters determine the format.\n\n**Text**:\n* 5 pattern letters--use narrow form for standalone. Otherwise does not apply\n* 4 or more pattern letters--use full form,\n* 3 pattern letters--use short or abbreviated form if one exists\n* less than 3--use numeric form if one exists\n\n**Number**: the minimum number of digits. Shorter numbers are zero-padded to\nthis amount (e.g. if \"m\" produces \"6\", \"mm\" produces \"06\"). Year is handled\nspecially; that is, if the count of 'y' is 2, the Year will be truncated to\n2 digits. (e.g., if \"yyyy\" produces \"1997\", \"yy\" produces \"97\".) Unlike other\nfields, fractional seconds are padded on the right with zero.\n\n**(Text & Number)**: 3 or over, use text, otherwise use number.\n\nAny characters not in the pattern will be treated as quoted text. For\ninstance, characters like ':', '.', ' ', '#' and '@' will appear in the\nresulting text even though they are not enclosed in single quotes. In our\ncurrent pattern usage, not all letters have meanings. But those unused\nletters are strongly discouraged to be used as quoted text without quotes,\nbecause we may use other letters as pattern characters in the future.\n\nExamples Using the US Locale:\n\n    Format Pattern                     Result\n    --------------                     -------\n    \"yyyy.MM.dd G 'at' HH:mm:ss vvvv\"  1996.07.10 AD at 15:08:56 Pacific Time\n    \"EEE, MMM d, ''yy\"                 Wed, July 10, '96\n    \"h:mm a\"                           12:08 PM\n    \"hh 'o''clock' a, zzzz\"            12 o'clock PM, Pacific Daylight Time\n    \"K:mm a, vvv\"                      0:00 PM, PT\n    \"yyyyy.MMMMM.dd GGG hh:mm aaa\"     01996.July.10 AD 12:08 PM\n\nWhen parsing a date string using the abbreviated year pattern (\"yy\"),\nDateFormat must interpret the abbreviated year relative to some\ncentury. It does this by adjusting dates to be within 80 years before and 20\nyears after the time the parse function is called. For example, using a\npattern of \"MM/dd/yy\" and a DateParse instance created on Jan 1, 1997,\nthe string \"01/11/12\" would be interpreted as Jan 11, 2012 while the string\n\"05/04/64\" would be interpreted as May 4, 1964. During parsing, only\nstrings consisting of exactly two digits, as defined by {@link\njava.lang.Character#isDigit(char)}, will be parsed into the default\ncentury. Any other numeric string, such as a one digit string, a three or\nmore digit string will be interpreted as its face value.\n\nIf the year pattern does not have exactly two 'y' characters, the year is\ninterpreted literally, regardless of the number of digits. So using the\npattern \"MM/dd/yyyy\", \"01/11/12\" parses to Jan 11, 12 A.D.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format1()","comment":"\nReturn a string representing [date] formatted according to our locale\nand internal format.\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"228"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDuration","id":"formatDuration1()","comment":"\nReturns a date string indicating how long ago (3 hours, 2 minutes)\nsomething has happened or how long in the future something will happen\ngiven a [reference] DateTime relative to the current time.\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"reference","id":"reference"}],"line":"240"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatDurationFrom","id":"formatDurationFrom2()","comment":"\nFormats a string indicating how long ago (negative [duration]) or how far\nin the future (positive [duration]) some time is with respect to a\nreference [date].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"249"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"parse","id":"parse2()","comment":"\nGiven user input, attempt to parse the [inputString] into the anticipated\nformat, treating it as being in the local timezone. If [inputString] does\nnot match our format, throws a [FormatException].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputString","id":"inputString"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"utc","id":"utc"}],"line":"258"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"parseUTC","id":"parseUTC1()","comment":"\nGiven user input, attempt to parse the [inputString] into the anticipated\nformat, treating it as being in UTC.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputString","id":"inputString"}],"line":"273"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isStatic":true,"kind":"method","name":"allLocalesWithSymbols","id":"allLocalesWithSymbols0()","comment":"\nReturns a list of all locales for which we have date formatting\ninformation.\n","line":"286"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_d","id":"add_d0()","comment":"\nThe \"add_*\" methods append a particular skeleton to the format, or set\nit as the only format if none was previously set. These are primarily\nuseful for creating compound formats. For example\n      new DateFormat.yMd().add_Hms();\nwould create a date format that prints both the date and the time.\n","line":"351"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_E","id":"add_E0()","line":"352"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_EEEE","id":"add_EEEE0()","line":"353"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_LLL","id":"add_LLL0()","line":"354"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_LLLL","id":"add_LLLL0()","line":"355"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_M","id":"add_M0()","line":"356"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_Md","id":"add_Md0()","line":"357"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MEd","id":"add_MEd0()","line":"358"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMM","id":"add_MMM0()","line":"359"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMMd","id":"add_MMMd0()","line":"360"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMMEd","id":"add_MMMEd0()","line":"361"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMMM","id":"add_MMMM0()","line":"362"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMMMd","id":"add_MMMMd0()","line":"363"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_MMMMEEEEd","id":"add_MMMMEEEEd0()","line":"364"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_QQQ","id":"add_QQQ0()","line":"365"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_QQQQ","id":"add_QQQQ0()","line":"366"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_y","id":"add_y0()","line":"367"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yM","id":"add_yM0()","line":"368"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMd","id":"add_yMd0()","line":"369"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMEd","id":"add_yMEd0()","line":"370"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMM","id":"add_yMMM0()","line":"371"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMMd","id":"add_yMMMd0()","line":"372"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMMEd","id":"add_yMMMEd0()","line":"373"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMMM","id":"add_yMMMM0()","line":"374"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMMMd","id":"add_yMMMMd0()","line":"375"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yMMMMEEEEd","id":"add_yMMMMEEEEd0()","line":"376"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yQQQ","id":"add_yQQQ0()","line":"377"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_yQQQQ","id":"add_yQQQQ0()","line":"378"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_H","id":"add_H0()","line":"379"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_Hm","id":"add_Hm0()","line":"380"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_Hms","id":"add_Hms0()","line":"381"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_j","id":"add_j0()","line":"382"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jm","id":"add_jm0()","line":"383"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jms","id":"add_jms0()","line":"384"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jmv","id":"add_jmv0()","line":"385"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jmz","id":"add_jmz0()","line":"386"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jv","id":"add_jv0()","line":"387"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_jz","id":"add_jz0()","line":"388"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_m","id":"add_m0()","line":"389"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_ms","id":"add_ms0()","line":"390"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"add_s","id":"add_s0()","line":"391"},{"kind":"method","name":"_useDefaultPattern","id":"_useDefaultPattern0()","comment":"\nWe are being asked to do formatting without having set any pattern.\nUse a default.\n","isPrivate":true,"line":"471"},{"kind":"method","name":"_appendPattern","id":"_appendPattern2()","comment":"\nSet our pattern, appending it to any existing patterns. Also adds a single\nspace to separate the two.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputPattern","id":"inputPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"' '","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"isPrivate":true,"line":"499"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"addPattern","id":"addPattern2()","comment":"\nAdd [inputPattern] to this instance as a pattern. If there was a previous\npattern, then this appends to it, separating the two by [separator].\n[inputPattern] is first looked up in our list of known skeletons.\nIf it's found there, then use the corresponding pattern for this locale.\nIf it's not, then treat [inputPattern] as an explicit pattern.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputPattern","id":"inputPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"' '","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"514"},{"kind":"method","name":"_setLocale","id":"_setLocale1()","comment":"\nSet the locale. If the locale can't be found, we also look up\nbased on alternative versions, e.g. if we have no 'en_CA' we will\nlook for 'en' as a fallback. It will also translate en-ca into en_CA.\nNull is also considered a valid value for [newLocale], indicating\nto use the default.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"newLocale","id":"newLocale"}],"isPrivate":true,"line":"553"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"localeExists","id":"localeExists1()","comment":"\nReturn true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.\n","children":[{"kind":"param","name":"localeName","id":"localeName"}],"line":"561"},{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"parsePattern","id":"parsePattern1()","comment":"Parse the template pattern and return a list of field objects.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"pattern","id":"pattern"}],"line":"572"},{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"_parsePatternHelper","id":"_parsePatternHelper1()","comment":"Recursive helper for parsing the template pattern. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"pattern","id":"pattern"}],"isPrivate":true,"line":"578"},{"returnType":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"kind":"method","name":"_match","id":"_match1()","comment":"Find elements in a string that are patterns for specific fields.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"pattern","id":"pattern"}],"isPrivate":true,"line":"591"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"locale","id":"locale","comment":"\nReturn the locale code in which we operate, e.g. 'en_US' or 'pt'.\n","line":"280"},{"kind":"property","name":"_formatFields","id":"_formatFields","comment":"\nGetter for [_formatFieldsPrivate] that lazily initializes it.\n","isPrivate":true,"line":"459"},{"kind":"property","name":"pattern","id":"pattern","comment":"Return the pattern that we use to format dates.","line":"530"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"property","name":"_availableSkeletons","id":"_availableSkeletons","comment":"Return the skeletons for our current locale. ","isPrivate":true,"line":"533"},{"ref":{"name":"DateSymbols","refId":"date_symbols/DateSymbols"},"kind":"property","name":"dateSymbols","id":"dateSymbols","comment":"\nReturn the [DateSymbol] information for the locale. This can be useful\nto find lists like the names of weekdays or months in a locale, but\nthe structure of this data may change, and it's generally better to go\nthrough the [format] and [parse] APIs. If the locale isn't present, or\nis uninitialized, returns null;\n","line":"544"},{"ref":{"name":"List","refId":"dart.core/List"},"isStatic":true,"kind":"property","name":"_fieldConstructors","id":"_fieldConstructors","isPrivate":true,"line":"566"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_MONTH","id":"ABBR_MONTH","comment":"\nFor each of the skeleton formats we also allow the use of the corresponding\nICU constant names.\n","line":"397"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"DAY","id":"DAY","line":"398"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_WEEKDAY","id":"ABBR_WEEKDAY","line":"399"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"WEEKDAY","id":"WEEKDAY","line":"400"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_STANDALONE_MONTH","id":"ABBR_STANDALONE_MONTH","line":"401"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"STANDALONE_MONTH","id":"STANDALONE_MONTH","line":"402"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"NUM_MONTH","id":"NUM_MONTH","line":"403"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"NUM_MONTH_DAY","id":"NUM_MONTH_DAY","line":"404"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"NUM_MONTH_WEEKDAY_DAY","id":"NUM_MONTH_WEEKDAY_DAY","line":"405"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_MONTH_DAY","id":"ABBR_MONTH_DAY","line":"406"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_MONTH_WEEKDAY_DAY","id":"ABBR_MONTH_WEEKDAY_DAY","line":"407"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"MONTH","id":"MONTH","line":"408"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"MONTH_DAY","id":"MONTH_DAY","line":"409"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"MONTH_WEEKDAY_DAY","id":"MONTH_WEEKDAY_DAY","line":"410"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ABBR_QUARTER","id":"ABBR_QUARTER","line":"411"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"QUARTER","id":"QUARTER","line":"412"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR","id":"YEAR","line":"413"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_NUM_MONTH","id":"YEAR_NUM_MONTH","line":"414"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_NUM_MONTH_DAY","id":"YEAR_NUM_MONTH_DAY","line":"415"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_NUM_MONTH_WEEKDAY_DAY","id":"YEAR_NUM_MONTH_WEEKDAY_DAY","line":"416"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_ABBR_MONTH","id":"YEAR_ABBR_MONTH","line":"417"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_ABBR_MONTH_DAY","id":"YEAR_ABBR_MONTH_DAY","line":"418"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_ABBR_MONTH_WEEKDAY_DAY","id":"YEAR_ABBR_MONTH_WEEKDAY_DAY","line":"419"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH","id":"YEAR_MONTH","line":"420"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_DAY","id":"YEAR_MONTH_DAY","line":"421"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_MONTH_WEEKDAY_DAY","id":"YEAR_MONTH_WEEKDAY_DAY","line":"422"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_ABBR_QUARTER","id":"YEAR_ABBR_QUARTER","line":"423"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"YEAR_QUARTER","id":"YEAR_QUARTER","line":"424"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR24","id":"HOUR24","line":"425"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR24_MINUTE","id":"HOUR24_MINUTE","line":"426"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR24_MINUTE_SECOND","id":"HOUR24_MINUTE_SECOND","line":"427"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR","id":"HOUR","line":"428"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE","id":"HOUR_MINUTE","line":"429"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE_SECOND","id":"HOUR_MINUTE_SECOND","line":"430"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE_GENERIC_TZ","id":"HOUR_MINUTE_GENERIC_TZ","line":"431"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_MINUTE_TZ","id":"HOUR_MINUTE_TZ","line":"432"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_GENERIC_TZ","id":"HOUR_GENERIC_TZ","line":"433"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"HOUR_TZ","id":"HOUR_TZ","line":"434"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"MINUTE","id":"MINUTE","line":"435"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"MINUTE_SECOND","id":"MINUTE_SECOND","line":"436"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"SECOND","id":"SECOND","line":"437"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_locale","id":"_locale","comment":"The locale in which we operate, e.g. 'en_US', or 'pt'. ","isPrivate":true,"line":"440"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_pattern","id":"_pattern","comment":"\nThe full template string. This may have been specified directly, or\nit may have been derived from a skeleton and the locale information\non how to interpret that skeleton.\n","isPrivate":true,"line":"447"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_DateFormatField","refId":"intl/_DateFormatField"}]},"kind":"variable","name":"_formatFieldsPrivate","id":"_formatFieldsPrivate","comment":"\nWe parse the format string into individual [_DateFormatField] objects\nthat are used to do the actual formatting and parsing. Do not use\nthis variable directly, use the getter [_formatFields].\n","isPrivate":true,"line":"454"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RegExp","refId":"dart.core/RegExp"}]},"isStatic":true,"kind":"variable","name":"_matchers","id":"_matchers","comment":"\nA series of regular expressions used to parse a format string into its\ncomponent fields.\n","isPrivate":true,"line":"480"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new DateFormat, using the format specified by [newPattern]. For\nforms that match one of our predefined skeletons, we look up the\ncorresponding pattern in [locale] (or in the default locale if none is\nspecified) and use the resulting full format string. This is the\npreferred usage, but if [newPattern] does not match one of the skeletons,\nthen it is used as a format directly, but will not be adapted to suit\nthe locale.\n\nFor example, in an en_US locale, specifying the skeleton\n    new DateFormat('yMEd');\nor the explicit\n    new DateFormat('EEE, M/d/y');\nwould produce the same result, a date of the form\n    Wed, 6/27/2012\nThe first version would produce a different format string if used in\nanother locale, but the second format would always be the same.\n\nIf [locale] does not exist in our set of supported locales then an\n[ArgumentError] is thrown.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"newPattern","id":"newPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"214"},{"kind":"constructor","name":"d","id":"d1()","comment":"\nThe named constructors for this class are all conveniences for creating\ninstances using one of the known \"skeleton\" formats, and having code\ncompletion support for discovering those formats.\nSo,\n    new DateFormat.yMd(\"en_US\")\nis equivalent to\n    new DateFormat(\"yMd\", \"en_US\")\nTo create a compound format you can use these constructors in combination\nwith the add_ methods below. e.g.\n    new DateFormat.yMd().add_Hms();\nIf the optional [locale] is omitted, the format will be created using the\ndefault locale in [Intl.systemLocale].\n","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"302"},{"kind":"constructor","name":"E","id":"E1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"303"},{"kind":"constructor","name":"EEEE","id":"EEEE1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"304"},{"kind":"constructor","name":"LLL","id":"LLL1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"305"},{"kind":"constructor","name":"LLLL","id":"LLLL1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"306"},{"kind":"constructor","name":"M","id":"M1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"307"},{"kind":"constructor","name":"Md","id":"Md1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"308"},{"kind":"constructor","name":"MEd","id":"MEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"309"},{"kind":"constructor","name":"MMM","id":"MMM1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"310"},{"kind":"constructor","name":"MMMd","id":"MMMd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"311"},{"kind":"constructor","name":"MMMEd","id":"MMMEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"312"},{"kind":"constructor","name":"MMMM","id":"MMMM1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"313"},{"kind":"constructor","name":"MMMMd","id":"MMMMd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"314"},{"kind":"constructor","name":"MMMMEEEEd","id":"MMMMEEEEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"315"},{"kind":"constructor","name":"QQQ","id":"QQQ1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"316"},{"kind":"constructor","name":"QQQQ","id":"QQQQ1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"317"},{"kind":"constructor","name":"y","id":"y1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"318"},{"kind":"constructor","name":"yM","id":"yM1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"319"},{"kind":"constructor","name":"yMd","id":"yMd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"320"},{"kind":"constructor","name":"yMEd","id":"yMEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"321"},{"kind":"constructor","name":"yMMM","id":"yMMM1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"322"},{"kind":"constructor","name":"yMMMd","id":"yMMMd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"323"},{"kind":"constructor","name":"yMMMEd","id":"yMMMEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"324"},{"kind":"constructor","name":"yMMMM","id":"yMMMM1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"325"},{"kind":"constructor","name":"yMMMMd","id":"yMMMMd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"326"},{"kind":"constructor","name":"yMMMMEEEEd","id":"yMMMMEEEEd1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"327"},{"kind":"constructor","name":"yQQQ","id":"yQQQ1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"328"},{"kind":"constructor","name":"yQQQQ","id":"yQQQQ1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"329"},{"kind":"constructor","name":"H","id":"H1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"330"},{"kind":"constructor","name":"Hm","id":"Hm1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"331"},{"kind":"constructor","name":"Hms","id":"Hms1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"332"},{"kind":"constructor","name":"j","id":"j1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"333"},{"kind":"constructor","name":"jm","id":"jm1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"334"},{"kind":"constructor","name":"jms","id":"jms1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"335"},{"kind":"constructor","name":"jmv","id":"jmv1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"336"},{"kind":"constructor","name":"jmz","id":"jmz1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"337"},{"kind":"constructor","name":"jv","id":"jv1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"338"},{"kind":"constructor","name":"jz","id":"jz1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"339"},{"kind":"constructor","name":"m","id":"m1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"340"},{"kind":"constructor","name":"ms","id":"ms1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"341"},{"kind":"constructor","name":"s","id":"s1()","children":[{"isOptional":true,"kind":"param","name":"locale","id":"locale"}],"line":"342"}],"uri":"package:intl/date_format.dart","line":"191"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Intl","id":"Intl","comment":"\nThe Intl class provides a common entry point for internationalization\nrelated tasks. An Intl instance can be created for a particular locale\nand used to create a date format via `anIntl.date()`. Static methods\non this class are also used in message formatting.\n\nMessage example:\n    '''I see ${Intl.plural(num_people,\n              {'0': 'no one at all',\n               '1': 'one other person',\n               'other': '$num_people other people'})} in $place.''''\n\nUsage examples:\n     today(date) => Intl.message(\n         \"Today's date is $date\",\n         name: 'today',\n         args: [date],\n         desc: 'Indicate the current date',\n         examples: {'date' : 'June 8, 2012'});\n     print(today(new DateTime.now());\n\n     msg(num_people, place) => Intl.message(\n          '''I see ${Intl.plural(num_people,\n            {'0': 'no one at all',\n             '1': 'one other person',\n             'other': '$num_people other people'})} in $place.''',\n         name: 'msg',\n         args: [num_people, place],\n         desc: 'Description of how many people are seen as program start.',\n         examples: {'num_people': 3, 'place': 'London'});\n\nCalling `msg(2, 'Athens');` would\nproduce \"I see 2 other people in Athens.\" as output in the default locale.\n\nTo use a locale other than the default, use the `withLocale` function.\nYou can set the default locale.\n      Intl.defaultLocale = \"pt_BR\";\n\nTo temporarily use a locale other than the default, use the `withLocale`\nfunction.\n      var todayString = new DateFormat(\"pt_BR\").format(new DateTime.now());\n      print(withLocale(\"pt_BR\", () => today(todayString));\n\nSee `tests/message_format_test.dart` for more examples.\n","children":[{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"kind":"method","name":"date","id":"date2()","comment":"\nReturn a new date format using the specified [pattern].\nIf [desiredLocale] is not specified, then we default to [locale].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"desiredLocale","id":"desiredLocale"}],"line":"122"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"message","id":"message6()","comment":"\nReturns a message that can be internationalized. It takes a\n[message_str] that will be translated, which may be interpolated\nbased on one or more variables, a [desc] providing a description of usage\nfor the [message_str], and a map of [examples] for each data element to be\nsubstituted into the message. For example, if message=\"Hello, $name\", then\nexamples = {'name': 'Sparky'}. If not using the user's default locale, or\nif the locale is not easily detectable, explicitly pass [locale].\nThe values of [desc] and [examples] are not used at run-time but are only\nmade available to the translators, so they MUST be simple Strings available\nat compile time: no String interpolation or concatenation.\nThe expected usage of this is inside a function that takes as parameters\nthe variables used in the interpolated string, and additionally also a\nlocale (optional).\nUltimately, the information about the enclosing function and its arguments\nwill be extracted automatically but for the time being it must be passed\nexplicitly in the [name] and [args] arguments.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message_str","id":"message_str"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"isNamed":true,"kind":"param","name":"desc","id":"desc"},{"ref":{"name":"Map","refId":"dart.core/Map"},"defaultValue":"const{}","isOptional":true,"isNamed":true,"kind":"param","name":"examples","id":"examples","line":"160"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"locale","id":"locale","line":"160"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name","line":"160"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"args","id":"args","line":"161"}],"line":"159"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"_localeExists","id":"_localeExists1()","comment":"\nReturn true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.\n","children":[{"kind":"param","name":"localeName","id":"localeName"}],"isPrivate":true,"line":"176"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"verifiedLocale","id":"verifiedLocale3()","comment":"\nGiven [newLocale] return a locale that we have data for that is similar\nto it, if possible.\nIf [newLocale] is found directly, return it. If it can't be found, look up\nbased on just the language (e.g. 'en_CA' -> 'en'). Also accepts '-'\nas a separator and changes it into '_' for lookup, and changes the\ncountry to uppercase.\nNote that null is interpreted as meaning the default locale, so if\n[newLocale] is null it will be returned.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"newLocale","id":"newLocale"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"localeExists","id":"localeExists"},{"ref":{"name":"Function","refId":"dart.core/Function"},"defaultValue":"_throwLocaleError","isOptional":true,"isNamed":true,"kind":"param","name":"onFailure","id":"onFailure","line":"191"}],"line":"190"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_throwLocaleError","id":"_throwLocaleError1()","comment":"\nThe default action if a locale isn't found in verifiedLocale. Throw\nan exception indicating the locale isn't correct.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"localeName","id":"localeName"}],"isPrivate":true,"line":"214"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"shortLocale","id":"shortLocale1()","comment":"Return the short version of a locale name, e.g. 'en_US' => 'en' ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"aLocale","id":"aLocale"}],"line":"219"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"canonicalizedLocale","id":"canonicalizedLocale1()","comment":"\nReturn the name [aLocale] turned into xx_YY where it might possibly be\nin the wrong case or with a hyphen instead of an underscore. If\n[aLocale] is null, for example, if you tried to get it from IE,\nreturn the current system locale.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"aLocale","id":"aLocale"}],"line":"230"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"plural","id":"plural12()","comment":"\nFormat a message differently depending on [howMany]. Normally used\nas part of an `Intl.message` text that is to be translated.\nSelects the correct plural form from\nthe provided alternatives. The [other] named argument is mandatory.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"howMany","id":"howMany"},{"isOptional":true,"isNamed":true,"kind":"param","name":"zero","id":"zero"},{"isOptional":true,"isNamed":true,"kind":"param","name":"one","id":"one"},{"isOptional":true,"isNamed":true,"kind":"param","name":"two","id":"two"},{"isOptional":true,"isNamed":true,"kind":"param","name":"few","id":"few"},{"isOptional":true,"isNamed":true,"kind":"param","name":"many","id":"many"},{"isOptional":true,"isNamed":true,"kind":"param","name":"other","id":"other"},{"isOptional":true,"isNamed":true,"kind":"param","name":"desc","id":"desc","line":"253"},{"isOptional":true,"isNamed":true,"kind":"param","name":"examples","id":"examples","line":"253"},{"isOptional":true,"isNamed":true,"kind":"param","name":"locale","id":"locale","line":"253"},{"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name","line":"253"},{"isOptional":true,"isNamed":true,"kind":"param","name":"args","id":"args","line":"253"}],"line":"252"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"gender","id":"gender9()","comment":"\nFormat a message differently depending on [targetGender]. Normally used as\npart of an Intl.message message that is to be translated.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"targetGender","id":"targetGender"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"male","id":"male","line":"286"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"female","id":"female","line":"286"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"other","id":"other","line":"286"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"desc","id":"desc","line":"287"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isOptional":true,"isNamed":true,"kind":"param","name":"examples","id":"examples","line":"287"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"locale","id":"locale","line":"287"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name","line":"287"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"args","id":"args","line":"288"}],"line":"285"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"select","id":"select7()","comment":"\nFormat a message differently depending on [choice]. We look up the value\nof [choice] in [cases] and return the result, or an empty string if\nit is not found. Normally used as part\nof an Intl.message message that is to be translated.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"choice","id":"choice"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"cases","id":"cases"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"desc","id":"desc","line":"317"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isOptional":true,"isNamed":true,"kind":"param","name":"examples","id":"examples","line":"317"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"locale","id":"locale","line":"317"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name","line":"317"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"args","id":"args","line":"318"}],"line":"316"},{"isStatic":true,"kind":"method","name":"withLocale","id":"withLocale2()","comment":"\nFormat the given function with a specific [locale], given a\n[message_function] that takes no parameters. The [message_function] can be\na simple message function that just returns the result of `Intl.message()`\nit can be a wrapper around a message function that takes arguments, or it\ncan be something more complex that manipulates multiple message\nfunctions.\n\nIn either case, the purpose of this is to delay calling [message_function]\nuntil the proper locale has been set. This returns the result of calling\n[message_function], which could be of an arbitrary type.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"locale","id":"locale"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"message_function","id":"message_function"}],"line":"349"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"getCurrentLocale","id":"getCurrentLocale0()","comment":"\nAccessor for the current locale. This should always == the default locale,\nunless for some reason this gets called inside a message that resets the\nlocale.\n","line":"365"},{"kind":"method","name":"toString","id":"toString0()","line":"370"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"locale","id":"locale","comment":"\nReturn the locale for this instance. If none was set, the locale will\nbe the default.\n","line":"170"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_locale","id":"_locale","comment":"\nString indicating the locale code with which the message is to be\nformatted (such as en-CA).\n","isPrivate":true,"line":"102"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"defaultLocale","id":"defaultLocale","comment":"The default locale. This defaults to being set from systemLocale, but\ncan also be set explicitly, and will then apply to any new instances where\nthe locale isn't specified.\n","line":"108"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"systemLocale","id":"systemLocale","comment":"\nThe system's locale, as obtained from the window.navigator.language\nor other operating system mechanism. Note that due to system limitations\nthis is not automatically set, and must be set by importing one of\nintl_browser.dart or intl_standalone.dart and calling findSystemLocale().\n","line":"116"},{"kind":"constructor","name":"","id":"1()","comment":"\nConstructor optionally [aLocale] for specifics of the language\nlocale to be used, otherwise, we will attempt to infer it (acceptable if\nDart is running on the client, we can infer from the browser/client\npreferences).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"aLocale","id":"aLocale"}],"line":"133"}],"line":"97"}],"uri":"package:intl/intl.dart","line":"32"}